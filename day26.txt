202.01.22


★JSON 
JSON은 좀 더 쉽게 데이터를 교환하고 저장하기 위하여 만들어진 텍스트 기반의 데이터 교환 표준이다.
사람이 읽을 수 있는 텍스트 기반의!!!
이러한 JSON은 XML의 대안으로서 좀 더 쉽게 데이터를 교환하고 저장하기 위하여 고안되었다. 또한 텍스트 기반이므로 어떠한 프로그래밍 
언어에서도 JSON 데이터를 읽고 사용할 수 있다.
1.JSON은 자바스크립트를 확장하여 만들어졌다.
2.JSON은 자바스크립트 객체 표기법을 따른다.
3.JSON데이터는 이름과 값의 쌍으로 이루어진다 (KEY - VALUE)
4.JSON데이터는 쉼표(,)로 나열된다. 
XML예제
<dog>
    <name>식빵</name>
    <family>웰시코기<family>
    <age>1</age>
    <weight>2.14</weight>
</dog>
JSON 예제
{
    "name": "식빵",
    "family": "웰시코기",
    "age": 1,
    "weight": 2.14
}
JSON은 자바스크립트의 객체 표기법에서 리터럴과 프로퍼티를 표현하는 방법만 가져와서 사용한다.

☆리터럴
변수와 다르게 해석되는 값 그 자체를 의미한다.
12 숫자 리터럴 "JSON" 문자열리터럴 true 불리언 리터럴

*JSON 스키마
JSON 데이터를 전송받는 측에서는 전송받은 데이터가 적법한 형식의 데이터인지 확인할 방법이 필요하다,, 이런 적법한 형식을 기술한 문서를
JSON스키마 라고 한다. 3가지 검증과정을 거친다.
1.데이터의 타입이 정확한가? 2.필수로 받아와야 하는 데이터가 포함되어 있는가? 3.데이터가 원하는 범위 안에 있는가?
JSON 스키마에서는 위와 같은 검증 기준을 모두 키워드를 이용하여 직접 명시할 수 있다.

*검증키워드 
type		유효한 데이터의 타입을 명시함.
properties	유효한 데이터 이름과 값의 쌍들을 명시함.
required		명시한 배열의 모든 요소를 프로퍼티로 가지고 있어야만 유효함.
minimum		최솟값 이상의 숫자만 유효함.
maximum		최댓값 이하의 숫자만 유효함.
multipleOf	명시한 숫자의 배수만 유효함.
maxLength	명시한 최대 길이 이하의 문자열만 유효함.
minLength	명시한 최소 길이 이상의 문자열만 유효함.
pattern		명시한 정규 표현식에 해당하는 문자열만 유효함.

정보를 나타내는 메타데이터 키워드는 title , description , default
다음은 예제이다..
{

    "title": "강아지 스키마",

    "description": "이 스키마는 강아지에 관한 데이터를 검증하기 위해 작성된 스키마임.",
    "type": "object",		//유효한 타입을 명시하면, 해당 데이터가 유효한지를 검사할 수 있다. 여기서는 객체인지 아닌지
    "properties": {		//properties 키워드를 사용하면, 해당 객체가 가지는 프로퍼티가 유효한지를 검사 할 수 있다.
        "name": {"type": "string"},
        "family": {"type": "string"},
        "age": {"type": "integer"},
        "weight": {"type": "number"},
        "owner": {
            "type": "object",
            "properties": {
                "ownerName": {"type": "string"},
                "phone": {"type": "string"}
            }
        }
    }
}
☆문자열 파싱 (XML)
text = "<language><name>HTML</name>" + 

    "<category>web</category>" + 

    "<priority>high</priority>" + 

    "<standard version='5.1'>W3C</standard></language>";

xmlParser = new DOMParser(); // DOMParser 객체를 생성함.

// parseFromString() 메소드를 이용해 문자열을 파싱함.

xmlDoc = xmlParser.parseFromString(text, "text/xml");

document.getElementById("text").innerHTML = "첫 번째 name 요소의 텍스트 값은 " +

xmlDoc.getElementsByTagName("name")[0].childNodes[0].nodeValue + "입니다.";

출처 : TCP스쿨 