2020.12.29

★ MyBatis ?
흔히 SQL 맵핑 프레임워크로 분류되는데, JDBC의 복잡하고 지루했던 작업을 피하는 용도로 많이 사용한다.
- 자동으로 Connection Close() 기능이 있다.
- 내부적으로 PreparedStatement 처리 
- #{prop}와 같이 속성을 지정하면 내부적으로 자동처리한다.
- 리턴타입을 지정하는 경우 자동으로 객체를 생성하고 Result Set 처리를 해준다.
Mybatis-spring 이라는 라이브러리를 통해 쉽게 연동작업을 처리할 수 있다.

관련 라이브러리..
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.4.6</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>1.3.2</version>
</dependency>

<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-tx</artifactId>
    <version>${org.springframework-version}</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>${org.springframework-version}</version>  // 최신버전을 위해 버전을 명시하지 않았다.
</dependency>

<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.21</version>
</dependency>

★ SQLSessionFactory ?
Mybatis에서 가장 핵심적인 객체이다. 이름에서 보듯이 내부적으로 SQLSession이라는 것을 만들어 내는 존재인데, 개발에서는 SQLSession을 통해서 Connection을 생성하거나
원하는 SQL을 전달하고, 결과를 리턴받는 구조로 작성하게 된다.
스프링에 등록하는 과정은 Bean을 이용해서 등록하면 된다. 

Mybatis를 이용해서 SQL을 처리할때는 어노테이션을 이용하는 방식이 압도적으로 편리하기는 하지만, SQL이 복잡하거나 길어지는 경우에는 어노테이션 보다는
XML형태로 작업 하는 방식을 더 선호하게 된다고 한다. 하지만 Mybatis-Spring의 경우 Mapper인터페이스와 XML을 동시에 이용할 수 있다. 

참고 ! (스코프와 생명주기..)
-의존성 삽입 프레임워크는 쓰레드에 안전하도록 해준다. 트랜잭션 성질을 가지는 SqlSessions과 매퍼들 그리고 그것들을 직접 빈에 삽입하면 생명주기에 대해 
기억하지 않아도 되게 해준다. 

*SqlSessionFactory
한번 만든뒤 SqlSessionFactory는 애플리케이션을 실행하는 동안 존재해야만 한다. 그래서 삭제하거나 재생성할 필요가 없다. 애플리케이션이 실행되는 동안 여러 차례 SqlSessionFactory 를 다시 빌드하지 않는 것이 가장 좋은 형태이다. 재빌드하는 형태는 결과적으로 “나쁜냄새” 가 나도록 한다. 그러므로 SqlSessionFactory 의 가장 좋은 스코프는 애플리케이션 스코프이다. 애플리케이션 스코프로 유지하기 위한 다양한 방법이 존재한다. 가장 간단한 방법은 싱글턴 패턴이나 static 싱글턴 패턴을 사용하는 것이다. 또는 구글 쥬스나 스프링과 같은 의존성 삽입 컨테이너를 선호할 수도 있다. 이러한 프레임워크는 SqlSessionFactory의 생명주기를 싱글턴으로 관리할 것이다.

*SqlSession
각각의 쓰레드는 자체적으로 SqlSession인스턴스를 가져야 한다. SqlSession인스턴스는 공유되지 않고 쓰레드에 안전하지도 않다. 그러므로 가장 좋은 스코프는 리퀘스트 또는 메소드 스코프이다.
