2021.01.19

★스프링JDBC
DAO객체를 이용해서 DB의 데이터를 이용
이때 매번 같은 동작을 반복하는 부분이 있다 -> 스프링에서 간단하게 처리가능..
JDBC드라이버 로드       DriverManager
         ↓			↓
데이터 베이스 연결	      Connection
         ↓			↓	======> JDBC 템플릿
   SQL문 실행	       Statement
         ↓			↓
데이터베이스 연결해제    Result Set

스프링Bean을 이용하여 DB관련 클래스들을 생성하고 조립할 수 있다.

1. Pom에 Dependency 추가해야 한다...
<!-- JDBC Template -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.1.4.RELEASE</version>
		</dependency>
2. 스프링 설정파일 servlet-context.xml에 Bean을 생성한다.
<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://localhost:3306/DB이름?serverTimezone=UTC" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="1234" />
	</beans:bean>
	
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
3.Controller에 JdbcTemplate를 추가한다. setter메소드를 추가..
public JdbcTemplate template;
	
	@Autowired
	// @Autowired는 주입하려고 하는 객체의 타입이 일치하는 객체를 자동으로 주입한다.
	public void setTemplate(JdbcTemplate template) {
		this.template = template;
		Constant.template = this.template;
	}
4.Constant클래스를 만들고 public static JdbcTemplate template; 변수선언 (어디서나 쉽게 참조할 수 있게 하기위해)
package com.javalec.spring_pjt_board.util;

import org.springframework.jdbc.core.JdbcTemplate;

public class Constant {
	
	public static JdbcTemplate template;		//어디서나 참조가능하게 public static으로..
	
}
5.DAO에 JdbcTemplate을 이용하여 메소드를 만든다.

★스프링의 포워딩과 리다이렉션..
스프링 프레임워크에서 컨트롤러의 메서드가 리턴하는 타입에 따라 포워딩과 리다이렉션 구현 방법을 간단히 기술한다.
단, 지원되는 resolver는 설정되어 있다고 가정. 따로 언급하지 않는다.
☆return String
return "/member/login.do";		//포워딩
return "redirect:/member/login.do";	//리다이렉션
리다이렉트땐 "redirect:" 이후 슬래쉬(/)의 여부에 따라 클라이언트에 전달할 경로가 달라 질 수 있다.
가령 Context 경로가 "/FO"이고 컨트롤러에 매핑된 경로의 최상단 ("/FO"바로 다음) 이 "/member"라고 했을때...,
"redirect:member/login.do"를 리턴하면 실제 전달되는 경로는 "/bo/member/member/login.do"가 된다.

☆return ModelAndView
ModelAndView는 포워드냐 리다이렉트냐 가 아니라
ModelAndView를 이용하여 포워드로도 리다이렉트로도 보낼수 있는거다..

포워드 ? 데이터가 같이보내지며 주소값 변화가 없다.
리다이렉트 ? 새로 생성되며 주소값 변화가 있다..
예를들어 콜센터에서 업무민원을 물어볼때 상담사가 담당내용이 아니라 내선번호로 연결해주면? 새롭게 질문해야한다 = > 리다이렉트
옆에 있는 동료에게 물어서 해결을 해준다 = > 포워드

----------------------------
@RequestMapping("/write")
	public String write(HttpServletRequest request, Model model) {
		System.out.println("write()");
		
		model.addAttribute("request", request);
		command = new BWriteCommand();
		command.execute(model);
		
		
		return "redirect:list";
	}
쓰고나면 리다이렉트로 해야 새로고침해도 데이터가 생성되지 않는다..

@Override
	public void execute(Model model) {
		// TODO Auto-generated method stub

		Map<String, Object> map = model.asMap();	//받아온 model도 key-value니까 asMap메소드로 맵에 저장 
		HttpServletRequest request = (HttpServletRequest) map.get("request"); 	// 가져온다 request 그리고 형변환
		
		String bName = request.getParameter("bName");
		String bTitle = request.getParameter("bTitle");
		String bContent = request.getParameter("bContent");
		
		BDao dao = new BDao();
		dao.write(bName, bTitle, bContent);
		
	}
public void write(final String bName, final String bTitle, final String bContent){
		template.update(new PreparedStatementCreator() {	//저장 갱신시 update라는 함수 사용한다..
			@Override
			public PreparedStatement createPreparedStatement(Connection con)
					throws SQLException {
				int bGroup = getCurrentNo();
				String query = "insert into mvc_board (bName, bTitle, bContent, bHit, bGroup, bStep, bIndent) values (?, ?, ?, 0, ?, 0, 0)";
				PreparedStatement pstmt = con.prepareStatement(query);
				pstmt.setString(1, bName);
				pstmt.setString(2, bTitle);
				pstmt.setString(3, bContent);
				pstmt.setInt(4, bGroup);
				
				return pstmt;
			}
		});
	} 
//매개변수가 final인 이유는 이름없는 클래스를 만들었는데 참조를 하려면 final로 임시저장해주는거. 지역변수는 원래는 소멸되기때문에