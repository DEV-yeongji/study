2021.01.05

알고리즘 - 배열

배열의 구성요소와 클래스의 필드는 초기값으로 초기화 된다. 그러나 메서드 안에 선언한 지역변수는 초기값으로 초기화
되지 않는다. 즉, 변수를 만들어도 초기화는 수행되지 않는다. java에서는 초기화나 대입에 의해 값이 넣어져 있지 않은
변수로부터는 값을 꺼낼 수 없다. 따라서 이 예제는 컴파일 오류가 발생된다.
int a;
System.out.println("a의 값은"+a+"이다");

배열은 선언과 동시에 초기화가 가능하다.
Class IntArrayInit{
	public static void main(String[] args){
		int [] a = {1,2,3,4,5};
		for(int i =0; i<a.length;i++){
			System.out.println("a["+i+"] = " + a[i]);
		}
	}
}

int [] a = {1,2,3,4,5}; 처럼 할 수도 있고 int[]a = new int[]{1,2,3,4,5}; 도 가능하다...

배열은 클론 메소드를 이용하여 복제 할 수 있다. 배열이름.clone;
배열 요소의 최대값 구하는 메소드 예제..
메소드 이름을 maxOf 라고 하고 인수로 받은 배열a의 최대값을 구하고 그값을 반환한다.

import.java.Scanner;
class MaxofArray {
	static int maxOf(int[] a){
		int max = a[0];
		for(int i=1;i<a.length;i++){
			if(a[i] > max){
				max = a[i];
			}
		}
		return max;
	}
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		System.out.println("키(height)의 최대값을 구한다.");
		System.out.print("사람수 : ");
		int num = sc.nextInt();
		int[] height = new int[num];
		for(int i =0; i<num;i++){
			System.out.print("height : ");
			height[i] = sc.nextInt();
		}
		System.out.println("최댓값은" + maxOf(height) + "입니다");
	}
}
해설.....↓
메인메서드에서는 가장먼저 사람 수를 변수 num에 읽어들이고, 요솟수가 num인 배열 height를 생선한다.
그리고 각 요소에 값을 읽어 들인 후 배열 height를 메서드 maxOf에 전달하고 반환한 최대값을 나타낸다.
인수 height는 배열 본체를 참조하는 배열 변수이다. 따라서 메서드 maxOf에 전달하는 것은 '배열 본체에 대한 참조'이다.
호출한 메서드 maxOf에서는 배열 변수인 매개변수 a가 전달받은 참조로 초기화되므로 배열 변수 a는 배열 height의 본체를 참조한다. 그 결과 메서드 maxOf안의 배열 a는 사실상 main메서드의 배열 height이다. 
이런 원리로 배열을 전달하므로 메서드 maxOf안에서는 전달받은 배열의 요솟수를 a.length로 얻을 수가 있고, 각
요소를 a[i]로 엑세스 할 수 있다.
=> 매개변수로 배열을 지정했기 때문에!!!

★ 접근제한자
객체의 멤버에 대한 접근을 제한할 때.. => 멤버는 객체 자신만의 속성이자 특징이므로 외부에 공개하는 걸 꺼리고자 할때!

private - > default -> protected -> public 순으로 접근제한이 넓어진다.
private : 현재의 객체 안에서만 허용 
default : 같은 패키지의 객체 허용 (명시안했을때..기본이다!)
protected : 같은패키지 및 상속관계 에서만..
public : 모든 접근이 허용

접근제한자 사용시
클래스 : public , default
생성자 : public, protected,default, private
멤버변수 : public, protected,default, private
멤버 메소드 : public, protected,default, private
지역변수 : 접근제한자를 사용할 수 없다.

* 헷갈리는 막간 용어
오버라이딩 : 상속관계에 놓여진 대상중 상위 클래스의 메소드를 구현하기 위해
오버로딩 : 메소드 이름이 같고 반환자(상관없다)와 매개변수는 동일하지 않을때 ! 다양한 호출에 응답!!! (참고로 메소드의 시그니처...)
메소드 오버로딩의 대표적인 예로는 println() 메소드 . 객체지향 프로그래밍 중 하나인 다형성을 구현하는 방법 중 하나이다!

★ 메소드 시그니처(method signature)
메소드 오버로딩의 핵심은 바로 메소드 시그니처(method signature)에 있다.
메소드 시그니처란 메소드의 선언부에 명시되는 매개변수의 리스트를 가리킨다.
만약 두 메소드가 매개변수의 개수와 타입, 그 순서까지 모두 같다면, 이 두 메소드의 시그니처는 같다고 할 수 있다.
+ 서로 다른 시그니처를 갖는 여러 메소드를 같은 이름으로 정의 하는것........
