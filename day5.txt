2020.12.25

★ 스프링 mvc
스프링은 하나의 기능을 위해서 만들어진 프레임워크가 아니기 때문에 여러 서브 프로젝트를 결합해서 
다양한 상황에 대처하여 개발 할 수 있다. 스프링 mvc프로젝트를 구성해서 사용한다는 의미는 내부적으로는 일반 java영역과 web관련 영역을
같이 연동해서 구동하게 된다. 바깥쪽의 webApplicationContext라는 존재는 기존의 구조에 mvc설정을 포함하는 구조로 만들어 진다.

* 모든 Request는 DispatcherServlet을 통하도록 설계된다. 이런 방식을 Front-controller패턴이라고 한다.  = > 전체흐름을 강제로 제어할 수 있다.
Ex : ) HttpServlet을 상속해서 만든 클래스를 이용하는 경우 특정 개발자는 이를 활용할 수 있지만 다른 사람은 자신이 원래 하던 방식대로 사용해서 개발할 수 있다(상속)
Front-Controller 패턴을 이용하는 경우 모든 Request의 처리에 대한 분배가 정해진 방식대로만 동작하기 때문에 좀 더 엄격하게 구조를 만들어 낸다.

★ 구조
컨트롤러 - Dispathcer에서 전달된 요청을 처리
servlet-context.xml - 스프링 컨테이너 설정 파일
web.xml - dispathcerServlet 서블릿 맵핑, 스프링 설정 파일 위치 정의
DispatcherServlet - 클라이언트의 요청을 최초로 받아서 컨트롤러에게 전달
뷰(jsp) - 화면에 띄어질 소스 처리

★ 스프링의 Controller
- HttpServletRequest, HttpServletResponse를 거의 사용할 필요 없이 필요한 기능을 구현 할 수 있다.
- 다양한 타입의 피라미터 처리, 다양한 타입의 리턴 타입 사용 가능 ( 보통 String을 리턴 했다.)
- Get방식, Post방식을 어노테이션(@)으로 처리가능
- 상속/인터페이스 방식 대신에 어노테이션만으로도 필요한 설정이 가능
어노테이션(@) 중심으로 구성되기때문에 매우 중요하다.

* 컨트롤러 클래스 제작 
최초 클라이언트로부터 요청이 들어왔을 때, 컨트롤러로 진입하게 된다. 그리고 컨트롤러는 요청에 대한 작업을 한 후 뷰쪽으로 데이터를 전달한다.
@Controller 를 명시하여 컨트롤러클래스 생성
	▼
@RequestMapping을 이용한 요청 경로 지정
	▼
요청처리메소드 구현
	▼
뷰 이름 리턴 ( 이동 )

@RequestMapping('/board/view') <-요청경로를 맵핑
public String view() {
	return "board/view";
}
//보통 메소드이름을 요청경로로 짓는다. 그리고 뷰페이지로 이동 또한 뷰페이지이름 = prefix + 요청처리 메소드 반환값  + suffix
해서 직접이동시 앞에(/WEB-INF/view), 뒤에(.jsp) 를 제거 해줘야한다. 